# def transform_string(text):
#     result = ""
#     for char in text:
#         if char.isalpha():
#             if char.islower():
#                 result += chr(ord('z') - (ord('a') - ord(char)))
#             else:
#                 result += chr(ord('Z') - (ord(char) - ord('A')))
#         else:
#             result += char
#     return result

# text = "CBXGU{ORF_BV_NVR_BLF_CRZL_QQ}"
# transformed_text = transform_string(text)
# print(transformed_text)
from Crypto.Util.number import *
import gmpy2
n = 24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879
c = 14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287
flag = True
phi = n - 2**512
e = 65537
while flag:
    d = gmpy2.invert(e, phi)
    result = pow(c, d, n)
    print(d)
    if long_to_bytes(result).startswith(b"XYCTF{"):
        print(long_to_bytes(result))
        flag = False
    phi -= 1